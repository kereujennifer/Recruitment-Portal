@using Auth.Models.ViewModels;
@model InterviewAndEvaluationViewModel

@{
    var btnText = "";
    if (Model.isEdit)
    {
        ViewData["Title"] = "EditEvaluation";
        btnText = "Update";
    }
    else
    {
        ViewData["Title"] = "AddEvaluation";
        btnText = "Save";
    }

}
<form asp-action="AddEvaluation">
    <!-- Title and Description for both Create and Edit -->
    <div class="row">
        <div class="form-group col-md-6">
            <label asp-for="Title">Title:</label>
            <input type="text" id="Title" name="Title" class="form-control" asp-for="Title" />
        </div>

        <div class="form-group col-md-6">
            <label asp-for="Description">Description:</label>
            <textarea id="Description" name="Description" class="form-control" asp-for="Description"></textarea>
        </div>
    </div>

    @if (Model.isEdit)
    {
        <!-- Edit Mode -->
        <h3>Edit Questions:</h3>

        <div id="questionsContainerEdit">
            @for (var i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions.ElementAt(i);

                <div class="form-group">
                    <input type="hidden" name="Questions[@i].Id" value="@question.Id" /> <!-- Hidden field for the question's ID -->

                    <label asp-for="Question" for="question_@i">Question:</label>
                    <input asp-for="Question" type="text" id="question_@i" name="Questions[@i].Question" class="form-control" value="@question.Question" required />

                    <label asp-for="MaxPoints" for="maxPoints_@i">Max Points:</label>
                    <input asp-for="MaxPoints"  type="number" id="maxPoints_@i" name="Questions[@i].MaxPoints" min="0" class="form-control" value="@question.MaxPoints" required />
                </div>

            }
        </div>

        <button type="button" class="btn btn-primary" id="addQuestionEdit">Add Question</button>

        <!-- Table to display existing questions -->
        <h3>Existing Questions:</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Question</th>
                    <th>Max Points</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in Model.Questions)
                {
                    <tr>
                        <td>@question.Question</td>
                        <td>@question.MaxPoints</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <!-- Create Mode -->
        <h2>Evaluation Questions</h2>

        <!-- Questions Section for Create Mode -->
      <h3>Questions:</h3>
    <div class="form-group">
            <label asp-for="Question">Question:</label>
            <input asp-for="Question" type="text" id="question" name="Question" class="form-control" required />
    </div>
    
    <div class="form-group">
            <label asp-for="MaxPoints">Max Points:</label>
            <input asp-for ="MaxPoints" type="number" id="maxPoints" min="0" name="MaxPoints" class="form-control" required />
    </div>

        <button type="button" class="btn btn-primary" id="addQuestion">Add Question</button>
        <div id="questionsContainer">
        <!-- JavaScript will populate this container with added questions -->
    </div>

    <!-- ... Previous form content ... -->

    <h3>Added Questions:</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Question</th>
                <th>Max Points</th>
            </tr>
        </thead>
        <tbody id="addedQuestionsTableBody">
            <!-- JavaScript will populate this table body with added questions -->
        </tbody>
    </table>
    }
    <div class="col-md-9 mb-2 d-flex justify-content-end mt-3">
        <a type="button" class="btn btn-outline-primary-2" asp-action="Index">Cancel</a>
        <button type="submit" class="btn btn-primary-2 ms-2">@btnText</button>
    </div>

   
</form>



<!-- ... Previous form content ... -->
@section Scripts {
    <script>
        function deleteQuestion(button) {
            const tableRow = button.closest("tr");
            if (tableRow) {
                tableRow.remove();
            }
        }
        // Handle the "Add Question" button in the "Edit" mode
        document.addEventListener("DOMContentLoaded", function () {
            const addQuestionButton = document.getElementById("addQuestionEdit");
            const questionsContainer = document.getElementById("questionsContainerEdit");

            let questionCounter = @Model.Questions.Count;
            function addQuestionToTable(question, maxPoints) {
                const questionRowHtml = `
                                        <tr>
                                            <td>${question}</td>
                                            <td>${maxPoints}</td>
                                            <td><button type="button" class="btn btn-danger" onclick="deleteQuestion(this)">Delete</button></td>
                                        </tr>
                                    `;

                addedQuestionsTableBody.innerHTML += questionRowHtml;
            }

            addQuestionButton.addEventListener("click", function () {
                const questionHtml = `
                                    <div class="form-group">
                                        <label for="question_${questionCounter}">Question:</label>
                                        <input type="text" id="question_${questionCounter}" name="Questions[${questionCounter}].Question" class="form-control" required />

                                        <label for="maxPoints_${questionCounter}">Max Points:</label>
                                        <input type="number" id="maxPoints_${questionCounter}" name="Questions[${questionCounter}].MaxPoints" min="0" class="form-control" required />
                                    </div>
                                `;

                questionsContainer.insertAdjacentHTML("beforeend", questionHtml);
                questionCounter++;
            });
        });

    </script>


    <script>
        function deleteQuestion(button) {
            const tableRow = button.closest("tr");
            if (tableRow) {
                tableRow.remove();
            }
        }
        document.addEventListener("DOMContentLoaded", function () {
            const addQuestionButton = document.getElementById("addQuestion");
            const addedQuestionsTableBody = document.getElementById("addedQuestionsTableBody");

            let questionCounter = 0;

            addQuestionButton.addEventListener("click", function () {
                console.log("Add Question button clicked");
                const questionInput = document.getElementById("question");
                const maxPointsInput = document.getElementById("maxPoints");
                const question = questionInput.value.trim(); // Trim leading and trailing spaces
                const maxPoints = maxPointsInput.value;

                if (question || maxPoints) {
                    const questionRowHtml = `
                                <tr>
                                    <td>${question}</td>
                                    <td>${maxPoints}</td>
                                                                                <td><button type="button" class="btn btn-danger" onclick="deleteQuestion(this)">Delete</button></td>

                                </tr>
                            `;

                    addedQuestionsTableBody.innerHTML += questionRowHtml;

                    // Create hidden inputs only if a question is provided
                    if (question) {
                        const questionInputHtml = `<input type="hidden" name="Questions[${questionCounter}].Question" value="${question}" />`;
                        const maxPointsInputHtml = `<input type="hidden" name="Questions[${questionCounter}].MaxPoints" value="${maxPoints}" />`;
                        addedQuestionsTableBody.insertAdjacentHTML("beforeend", questionInputHtml);
                        addedQuestionsTableBody.insertAdjacentHTML("beforeend", maxPointsInputHtml);
                        questionCounter++;
                    }

                    // Clear the input fields after adding
                    questionInput.value = "";
                    maxPointsInput.value = "";
                }
            });

          
        });
    </script>
}


